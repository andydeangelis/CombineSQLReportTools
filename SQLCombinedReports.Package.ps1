#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 087317a2-0313-447d-a28b-5df2729d3b06
# Source File: C:\Scripts\Projects\SQLCombinedReports\SQLCombinedReports.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
VgIAAB+LCAAAAAAABACFUl1PwyAUfV+y/9DwaNL1a9oZOx50qVni57r4amh7a1EKDaVz26+Xls5s
UePLhQOXczgHohVkYgNytyCK4PHIsqInKd4hU1ay41kpBad7yOcoJqwB1C/GlCmQc3Q2qRvvqquV
GXIzeNuK9ZOir42uZqUEVk/UVqFeSEu9gGyo4NifuJFzAMOeVoHlAruzMPBC4ttu4AX2dBrmNvFn
qX2eF37oX+ZB6l5EztA8HB0crHc1YE18DA/kguVaznKO1ZoBDNC6binTzl2EE0WkauvOjNH6q9NK
SiK7uNay1WmtoAAJPIO45ZnS5uZoyTfiA+xbJlLCXnVYCJt50yX3D/svfEkpPu17QnksZKX5CoQP
qHuBE0IDjM3vWAx6lPSNcsK6hgdSAU6e725ElVIO+QpqIVV3v1ofiZwfveNR5Jz8oy+irzQrVgIA
AA==#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.150
     Generated on:       5/17/2018 8:37 AM
     Generated by:       andy-user
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2018
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
6wMAACODCAAAAAAABAC9k0trg0AQx++FfgfJWdRlXU1AhdCQS+mDWtJeRx1l6T7C7prgt69NS1Jo
SUsOMpd5MPPjz8xkT1jrHZphBQ680bFcq3xGAzIrrq88L3swvOMKxJoLvAeJRenAuH4bbK3Nwh/V
Q8/SWpSV4GgP8SkzFOVgHUrf23yR4iD6MN+76YXrDeYKe2dA+N5jP06ob3F41m+o8ipNgdUsIQsa
YzRfZOFx5u+M4A4UdChRuWDZOy3BjcATmfyXTEnV0jlLoKFJjJT9TX7hqtF7G6y1kXYSrSsDe666
S1gRbVmbtoQ0LAIKZ1jS1toIXk2jaLzHSUCvUkwjiBusnTZDiWbHa7zoMM4v6xh+fl4Wfn/u4h27
t81y6wMAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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
baMvh+Zf4LfyA/5vjPv9D5z5aITVCQAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[FolderBrowserModernDialog] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Reflection;

        namespace SAPIENTypes
        {
		    public class FolderBrowserModernDialog : System.Windows.Forms.CommonDialog
            {
                private System.Windows.Forms.OpenFileDialog fileDialog;
                public FolderBrowserModernDialog()
                {
                    fileDialog = new System.Windows.Forms.OpenFileDialog();
                    fileDialog.Filter = "Folders|\n";
                    fileDialog.AddExtension = false;
                    fileDialog.CheckFileExists = false;
                    fileDialog.DereferenceLinks = true;
                    fileDialog.Multiselect = false;
                    fileDialog.Title = "Select a folder";
                }

                public string Title
                {
                    get { return fileDialog.Title; }
                    set { fileDialog.Title = value; }
                }

                public string InitialDirectory
                {
                    get { return fileDialog.InitialDirectory; }
                    set { fileDialog.InitialDirectory = value; }
                }
                
                public string SelectedPath
                {
                    get { return fileDialog.FileName; }
                    set { fileDialog.FileName = value; }
                }

                object InvokeMethod(Type type, object obj, string method, object[] parameters)
                {
                    MethodInfo methInfo = type.GetMethod(method, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    return methInfo.Invoke(obj, parameters);
                }

                bool ShowOriginalBrowserDialog(IntPtr hwndOwner)
                {
                    using(FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog())
                    {
                        folderBrowserDialog.Description = this.Title;
                        folderBrowserDialog.SelectedPath = !string.IsNullOrEmpty(this.SelectedPath) ? this.SelectedPath : this.InitialDirectory;
                        folderBrowserDialog.ShowNewFolderButton = false;
                        if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
                        {
                            fileDialog.FileName = folderBrowserDialog.SelectedPath;
                            return true;
                        }
                        return false;
                    }
                }

                protected override bool RunDialog(IntPtr hwndOwner)
                {
                    if (Environment.OSVersion.Version.Major >= 6)
                    {      
                        try
                        {
                            bool flag = false;
                            System.Reflection.Assembly assembly = Assembly.Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");
                            Type typeIFileDialog = assembly.GetType("System.Windows.Forms.FileDialogNative").GetNestedType("IFileDialog", BindingFlags.NonPublic);
                            uint num = 0;
                            object dialog = InvokeMethod(fileDialog.GetType(), fileDialog, "CreateVistaDialog", null);
                            InvokeMethod(fileDialog.GetType(), fileDialog, "OnBeforeVistaDialog", new object[] { dialog });
                            uint options = (uint)InvokeMethod(typeof(System.Windows.Forms.FileDialog), fileDialog, "GetOptions", null) | (uint)0x20;
                            InvokeMethod(typeIFileDialog, dialog, "SetOptions", new object[] { options });
                            Type vistaDialogEventsType = assembly.GetType("System.Windows.Forms.FileDialog").GetNestedType("VistaDialogEvents", BindingFlags.NonPublic);
                            object pfde = Activator.CreateInstance(vistaDialogEventsType, fileDialog);
                            object[] parameters = new object[] { pfde, num };
                            InvokeMethod(typeIFileDialog, dialog, "Advise", parameters);
                            num = (uint)parameters[1];
                            try
                            {
                                int num2 = (int)InvokeMethod(typeIFileDialog, dialog, "Show", new object[] { hwndOwner });
                                flag = 0 == num2;
                            }
                            finally
                            {
                                InvokeMethod(typeIFileDialog, dialog, "Unadvise", new object[] { num });
                                GC.KeepAlive(pfde);
                            }
                            return flag;
                        }
                        catch
                        {
                            return ShowOriginalBrowserDialog(hwndOwner);
                        }
                    }
                    else
                        return ShowOriginalBrowserDialog(hwndOwner);
                }

                public override void Reset()
                {
                    fileDialog.Reset();
                }
            }
       }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formCombinedSQLReporting = New-Object 'System.Windows.Forms.Form'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$buttonBack = New-Object 'System.Windows.Forms.Button'
	$buttonFinish = New-Object 'System.Windows.Forms.Button'
	$tabcontrolWizard = New-Object 'System.Windows.Forms.TabControl'
	$tabpageStep1 = New-Object 'System.Windows.Forms.TabPage'
	$buttonReportPath = New-Object 'System.Windows.Forms.Button'
	$textboxReportPath = New-Object 'System.Windows.Forms.TextBox'
	$labelReportOutputPath = New-Object 'System.Windows.Forms.Label'
	$datagridview2 = New-Object 'System.Windows.Forms.DataGridView'
	$buttonFileBrowse = New-Object 'System.Windows.Forms.Button'
	$textboxServerFileName = New-Object 'System.Windows.Forms.TextBox'
	$labelServerListFilePath = New-Object 'System.Windows.Forms.Label'
	$tabpageStep2 = New-Object 'System.Windows.Forms.TabPage'
	$checkboxDoNotSpecifySQLCrede = New-Object 'System.Windows.Forms.CheckBox'
	$buttonExecute1 = New-Object 'System.Windows.Forms.Button'
	$textboxSQLAccount = New-Object 'System.Windows.Forms.TextBox'
	$buttonSetSQLAccount = New-Object 'System.Windows.Forms.Button'
	$buttonSetDomainAccount = New-Object 'System.Windows.Forms.Button'
	$textboxDomainAccount = New-Object 'System.Windows.Forms.TextBox'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$buttonNext = New-Object 'System.Windows.Forms.Button'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$folderbrowsermoderndialog1 = New-Object 'SAPIENTypes.FolderBrowserModernDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	#-------------------------------------------------------
	# NOTE: When new TabPage added place the validation code
	# 		in the Test-WizardPage function.
	#-------------------------------------------------------
	function Test-WizardPage
	{
	<#
		Add TabPages and place the validation code in this function
	#>
		[OutputType([boolean])]
		param([System.Windows.Forms.TabPage]$tabPage)
		
		if($tabPage -eq $tabpageStep1)
		{
			#TODO: Enter Validation Code here for Step 1
			if ($textboxServerFileName.Text -and $textboxReportPath.Text)
			{
				return $true
			}
			
			return $false
		}
		elseif ($tabPage -eq $tabpageStep2)
		{
			#TODO: Enter Validation Code here for Step 2
			if ($textboxDomainAccount.Text -and $textboxSQLAccount.Text)
			{
				$buttonExecute1.Enabled = $true
				return $true
			}
			elseif ($textboxDomainAccount.Text -and $checkboxDoNotSpecifySQLCrede.Checked)
			{
				$buttonExecute1.Enabled = $true
				return $true
			}
			elseif (($textboxDomainAccount.Text -and (-not $textboxSQLAccount.Text)) -or ((-not $textboxDomainAccount.Text) -and (-not $checkboxDoNotSpecifySQLCrede.Checked)))
			{
				$buttonExecute1.Enabled = $false
				return $true
			}
			
			return $false
			
		}
		
		#Add more pages here
		
		return $false
	}
	
	
	
	$buttonFinish_Click = {
		#TODO: Place custom script here
			
	}
	
	#region Events and Functions
	$formCombinedSQLReporting_Load={
		Update-NavButtons
	}
	
	function Update-NavButtons
	{
		<# 
			.DESCRIPTION
			Validates the current tab and Updates the Next, Prev and Finish buttons.
		#>
		$enabled = Test-WizardPage $tabcontrolWizard.SelectedTab
		$buttonNext.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		$buttonBack.Enabled = $tabcontrolWizard.SelectedIndex -gt 0
		$buttonFinish.Enabled = $enabled -and ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)	
		#Uncomment to Hide Buttons
		#$buttonNext.Visible = ($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		#$buttonFinish.Visible = ($tabcontrolWizard.SelectedIndex -eq $tabcontrolWizard.TabCount - 1)
	}
	
	$script:DeselectedIndex = -1
	$tabcontrolWizard_Deselecting=[System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
		# Store the previous tab index
		$script:DeselectedIndex = $_.TabPageIndex
	}
	
	$tabcontrolWizard_Selecting=[System.Windows.Forms.TabControlCancelEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.TabControlCancelEventArgs]
		# We only validate if we are moving to the Next TabPage. 
		# Users can move back without validating
		if($script:DeselectedIndex -ne -1 -and $script:DeselectedIndex -lt $_.TabPageIndex)
		{
			#Validate each page until we reach the one we want
			for($index = $script:DeselectedIndex; $index -lt $_.TabPageIndex; $index++)
			{
				$_.Cancel = -not (Test-WizardPage $tabcontrolWizard.TabPages[$index])
				
				if($_.Cancel) 
				{
					# Cancel and Return if validation failed.
					return;
				}
			}
		}
		
		Update-NavButtons
	}
	
	$buttonBack_Click={
		#Go to the previous tab page
		if($tabcontrolWizard.SelectedIndex -gt 0)
		{
			$tabcontrolWizard.SelectedIndex--
		}
	}
	
	$buttonNext_Click={	
		#Go to the next tab page
		if($tabcontrolWizard.SelectedIndex -lt $tabcontrolWizard.TabCount - 1)
		{
			$tabcontrolWizard.SelectedIndex++
		}
	}
	
	#endregion
	
	#------------------------------------------------------
	# NOTE: When a Control State changes you should call
	# 		Update-NavButtons to trigger validation
	#------------------------------------------------------
	
	$textboxServerFileName_TextChanged={
		Update-NavButtons
	}
	
	$openfiledialog1_FileOk=[System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
	}
	
	$buttonFileBrowse_Click={
		
		# Open file dialog box for list of servers.
		
		$openfiledialog1.ShowDialog()
		$textboxServerFileName.Text = $openfiledialog1.FileName
		
		# Add the content of the servers file to the datagrid for Step 2.
		
		$servers = Get-Content ($openfiledialog1.FileName) | % {
			New-Object PSObject -Property @{
				"Server Name"  = $_
			}
		}
		
		$array = New-Object System.Collections.ArrayList
		$array.AddRange($servers)
		
		$datagridview2.DataSource = $array
	}
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)	
	}
	
	function Add-ListViewItem
	{
	<#
		.SYNOPSIS
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.DESCRIPTION
			Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.
	
		.PARAMETER ListView
			The ListView control to add the items to.
	
		.PARAMETER Items
			The object or objects you wish to load into the ListView's Items collection.
			
		.PARAMETER  ImageIndex
			The index of a predefined image in the ListView's ImageList.
		
		.PARAMETER  SubItems
			List of strings to add as Subitems.
		
		.PARAMETER Group
			The group to place the item(s) in.
		
		.PARAMETER Clear
			This switch clears the ListView's Items before adding the new item(s).
		
		.EXAMPLE
			Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
	#>
		
		Param( 
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
		
		if($Clear)
		{
			$ListView.Items.Clear();
	    }
	    
	    $lvGroup = $null
	    if ($Group -is [System.Windows.Forms.ListViewGroup])
	    {
	        $lvGroup = $Group
	    }
	    elseif ($Group -is [string])
	    {
	        #$lvGroup = $ListView.Group[$Group] # Case sensitive
	        foreach ($groupItem in $ListView.Groups)
	        {
	            if ($groupItem.Name -eq $Group)
	            {
	                $lvGroup = $groupItem
	                break
	            }
	        }
	        
	        if ($null -eq $lvGroup)
	        {
	            $lvGroup = $ListView.Groups.Add($Group, $Group)
	        }
	    }
	    
		if($Items -is [Array])
		{
			$ListView.BeginUpdate()
			foreach ($item in $Items)
			{		
				$listitem  = $ListView.Items.Add($item.ToString(), $ImageIndex)
				#Store the object in the Tag
				$listitem.Tag = $item
				
				if($null -ne $SubItems)
				{
					$listitem.SubItems.AddRange($SubItems)
				}
				
				if($null -ne $lvGroup)
				{
					$listitem.Group = $lvGroup
				}
			}
			$ListView.EndUpdate()
		}
		else
		{
			#Add a new item to the ListView
			$listitem  = $ListView.Items.Add($Items.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $Items
			
			if($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
	}
	
	#endregion
	
	$datagridview1_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
		#TODO: Place custom script here
		
	}
	
	$buttonSetDomainAccount_Click={
		
		$message = "The domain account you specify must be a member of the local Administrators group on each server."
		
		$global:domainCredButton = Get-Credential -Message $message
		$textboxDomainAccount.Text = $global:domainCredButton.UserName
		
		Update-NavButtons
	}
	
	$textboxDomainAccount_TextChanged={
		#TODO: Place custom script here
		
	}
	
	$buttonSetSQLAccount_Click={
		
		$sqlMessage = "Please specify your SQL username and password."
		
		$global:sqlCredButton = Get-Credential -Message $sqlMessage
		$textboxSQLAccount.Text = $global:sqlCredButton.UserName	
		
		Update-NavButtons
	}
	
	$textboxSQLAccount_TextChanged={
		#TODO: Place custom script here
		
	}
	
	$tabcontrolWizard_SelectedIndexChanged={
		#TODO: Place custom script here
		
	}
	
	$labelReportOutputPath_Click={
		#TODO: Place custom script here
		
	}
	
	$buttonReportPath_Click={
		
		# Open folder dialog box for list of servers.
		
		$folderbrowsermoderndialog1.ShowDialog()
		$textboxReportPath.Text = $folderbrowsermoderndialog1.SelectedPath
		
	}
	
	$textboxReportPath_TextChanged={
		
		Update-NavButtons
		
	}
	
	$datagridview2_CellContentClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
		#TODO: Place custom script here
		
	}
	$buttonExecute1_Click={
		
		# Get current location for working directory.
		$wd = Get-Location
		
		# $servers = Get-Content $textboxServerFileName.ToString()
		$scriptFile = "$wd\CombineSQLReportTools\PS_SQL_DB_Info.ps1"
		
		# Export the SQL credentials to a temporary DPAPI XML file.
		
		# $sqlCredXMLFile = "$PSScriptRoot\sqlcred.xml"
		$sqlCredXMLFile = "$wd\sqlcred.xml"
		
		if ($checkboxDoNotSpecifySQLCrede.Checked -eq $true)
		{
			$null | Export-Clixml -Path $sqlCredXMLFile
		}
		Else
		{
			$global:sqlCredButton | Export-Clixml -Path $sqlCredXMLFile
		}
		
		# Export the Domain credentials to a temporary DPAPI XML file.
		
		# $domainCredXMLFile = "$PSScriptRoot\domaincred.xml"
		$domainCredXMLFile = "$wd\domaincred.xml"
		$global:domainCredButton | Export-Clixml -Path $domainCredXMLFile
		
		$argumentList = "-executionpolicy bypass", "-mta", "-noninteractive", "-windowstyle normal", "-nologo", "-file $scriptFile", $textboxServerFileName.Text, $textboxReportPath.Text, $sqlCredXMLFile, $domainCredXMLFile
		# $argumentList = $textboxServerFileName.Text, $textboxReportPath.Text, $sqlCredXMLFile
		
		# Invoke-Command -FilePath $scriptFile -ArgumentList $argumentList
		Start-Process powershell -WorkingDirectory $wd -ArgumentList $argumentList -NoNewWindow 
		
	}
	
	$checkboxDoNotSpecifySQLCrede_CheckedChanged={
		#TODO: Place custom script here
		
		Update-NavButtons
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formCombinedSQLReporting.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_textboxReportPath = $textboxReportPath.Text
		$script:MainForm_datagridview2 = $datagridview2.SelectedCells
		$script:MainForm_textboxServerFileName = $textboxServerFileName.Text
		$script:MainForm_checkboxDoNotSpecifySQLCrede = $checkboxDoNotSpecifySQLCrede.Checked
		$script:MainForm_textboxSQLAccount = $textboxSQLAccount.Text
		$script:MainForm_textboxDomainAccount = $textboxDomainAccount.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonBack.remove_Click($buttonBack_Click)
			$buttonFinish.remove_Click($buttonFinish_Click)
			$buttonReportPath.remove_Click($buttonReportPath_Click)
			$textboxReportPath.remove_TextChanged($textboxReportPath_TextChanged)
			$labelReportOutputPath.remove_Click($labelReportOutputPath_Click)
			$datagridview2.remove_CellContentClick($datagridview2_CellContentClick)
			$buttonFileBrowse.remove_Click($buttonFileBrowse_Click)
			$textboxServerFileName.remove_TextChanged($textboxServerFileName_TextChanged)
			$checkboxDoNotSpecifySQLCrede.remove_CheckedChanged($checkboxDoNotSpecifySQLCrede_CheckedChanged)
			$buttonExecute1.remove_Click($buttonExecute1_Click)
			$textboxSQLAccount.remove_TextChanged($textboxSQLAccount_TextChanged)
			$buttonSetSQLAccount.remove_Click($buttonSetSQLAccount_Click)
			$buttonSetDomainAccount.remove_Click($buttonSetDomainAccount_Click)
			$textboxDomainAccount.remove_TextChanged($textboxDomainAccount_TextChanged)
			$tabcontrolWizard.remove_SelectedIndexChanged($tabcontrolWizard_SelectedIndexChanged)
			$tabcontrolWizard.remove_Selecting($tabcontrolWizard_Selecting)
			$tabcontrolWizard.remove_Deselecting($tabcontrolWizard_Deselecting)
			$buttonNext.remove_Click($buttonNext_Click)
			$formCombinedSQLReporting.remove_Load($formCombinedSQLReporting_Load)
			$openfiledialog1.remove_FileOk($openfiledialog1_FileOk)
			$formCombinedSQLReporting.remove_Load($Form_StateCorrection_Load)
			$formCombinedSQLReporting.remove_Closing($Form_StoreValues_Closing)
			$formCombinedSQLReporting.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formCombinedSQLReporting.SuspendLayout()
	$tabcontrolWizard.SuspendLayout()
	$tabpageStep1.SuspendLayout()
	$tabpageStep2.SuspendLayout()
	#
	# formCombinedSQLReporting
	#
	$formCombinedSQLReporting.Controls.Add($buttonCancel)
	$formCombinedSQLReporting.Controls.Add($buttonBack)
	$formCombinedSQLReporting.Controls.Add($buttonFinish)
	$formCombinedSQLReporting.Controls.Add($tabcontrolWizard)
	$formCombinedSQLReporting.Controls.Add($buttonNext)
	$formCombinedSQLReporting.AcceptButton = $buttonFinish
	$formCombinedSQLReporting.AutoScaleDimensions = '6, 13'
	$formCombinedSQLReporting.AutoScaleMode = 'Font'
	$formCombinedSQLReporting.CancelButton = $buttonCancel
	$formCombinedSQLReporting.ClientSize = '537, 329'
	$formCombinedSQLReporting.FormBorderStyle = 'FixedDialog'
	$formCombinedSQLReporting.MaximizeBox = $False
	$formCombinedSQLReporting.Name = 'formCombinedSQLReporting'
	$formCombinedSQLReporting.StartPosition = 'CenterScreen'
	$formCombinedSQLReporting.Text = 'Combined SQL Reporting'
	$formCombinedSQLReporting.add_Load($formCombinedSQLReporting_Load)
	#
	# buttonCancel
	#
	$buttonCancel.Anchor = 'Bottom, Right'
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '369, 294'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 4
	$buttonCancel.Text = '&Cancel'
	$buttonCancel.UseCompatibleTextRendering = $True
	$buttonCancel.UseVisualStyleBackColor = $True
	#
	# buttonBack
	#
	$buttonBack.Anchor = 'Bottom, Left'
	$buttonBack.Location = '13, 294'
	$buttonBack.Name = 'buttonBack'
	$buttonBack.Size = '75, 23'
	$buttonBack.TabIndex = 1
	$buttonBack.Text = '< &Back'
	$buttonBack.UseCompatibleTextRendering = $True
	$buttonBack.UseVisualStyleBackColor = $True
	$buttonBack.add_Click($buttonBack_Click)
	#
	# buttonFinish
	#
	$buttonFinish.Anchor = 'Bottom, Right'
	$buttonFinish.DialogResult = 'OK'
	$buttonFinish.Location = '450, 294'
	$buttonFinish.Name = 'buttonFinish'
	$buttonFinish.Size = '75, 23'
	$buttonFinish.TabIndex = 3
	$buttonFinish.Text = '&Finish'
	$buttonFinish.UseCompatibleTextRendering = $True
	$buttonFinish.UseVisualStyleBackColor = $True
	$buttonFinish.add_Click($buttonFinish_Click)
	#
	# tabcontrolWizard
	#
	$tabcontrolWizard.Controls.Add($tabpageStep1)
	$tabcontrolWizard.Controls.Add($tabpageStep2)
	$tabcontrolWizard.Anchor = 'Top, Bottom, Left, Right'
	$tabcontrolWizard.Location = '13, 12'
	$tabcontrolWizard.Name = 'tabcontrolWizard'
	$tabcontrolWizard.SelectedIndex = 0
	$tabcontrolWizard.Size = '512, 276'
	$tabcontrolWizard.TabIndex = 0
	$tabcontrolWizard.add_SelectedIndexChanged($tabcontrolWizard_SelectedIndexChanged)
	$tabcontrolWizard.add_Selecting($tabcontrolWizard_Selecting)
	$tabcontrolWizard.add_Deselecting($tabcontrolWizard_Deselecting)
	#
	# tabpageStep1
	#
	$tabpageStep1.Controls.Add($buttonReportPath)
	$tabpageStep1.Controls.Add($textboxReportPath)
	$tabpageStep1.Controls.Add($labelReportOutputPath)
	$tabpageStep1.Controls.Add($datagridview2)
	$tabpageStep1.Controls.Add($buttonFileBrowse)
	$tabpageStep1.Controls.Add($textboxServerFileName)
	$tabpageStep1.Controls.Add($labelServerListFilePath)
	$tabpageStep1.Location = '4, 22'
	$tabpageStep1.Name = 'tabpageStep1'
	$tabpageStep1.Padding = '3, 3, 3, 3'
	$tabpageStep1.Size = '504, 250'
	$tabpageStep1.TabIndex = 0
	$tabpageStep1.Text = 'Step 1'
	$tabpageStep1.UseVisualStyleBackColor = $True
	#
	# buttonReportPath
	#
	$buttonReportPath.Location = '414, 47'
	$buttonReportPath.Name = 'buttonReportPath'
	$buttonReportPath.Size = '75, 23'
	$buttonReportPath.TabIndex = 6
	$buttonReportPath.Text = 'Browse...'
	$buttonReportPath.UseCompatibleTextRendering = $True
	$buttonReportPath.UseVisualStyleBackColor = $True
	$buttonReportPath.add_Click($buttonReportPath_Click)
	#
	# textboxReportPath
	#
	$textboxReportPath.Location = '137, 50'
	$textboxReportPath.Name = 'textboxReportPath'
	$textboxReportPath.ReadOnly = $True
	$textboxReportPath.Size = '259, 20'
	$textboxReportPath.TabIndex = 5
	$textboxReportPath.add_TextChanged($textboxReportPath_TextChanged)
	#
	# labelReportOutputPath
	#
	$labelReportOutputPath.AutoSize = $True
	$labelReportOutputPath.Location = '9, 50'
	$labelReportOutputPath.Name = 'labelReportOutputPath'
	$labelReportOutputPath.Size = '105, 17'
	$labelReportOutputPath.TabIndex = 4
	$labelReportOutputPath.Text = 'Report Output Path:'
	$labelReportOutputPath.UseCompatibleTextRendering = $True
	$labelReportOutputPath.add_Click($labelReportOutputPath_Click)
	#
	# datagridview2
	#
	$datagridview2.AllowUserToDeleteRows = $False
	$datagridview2.AutoSizeColumnsMode = 'Fill'
	$datagridview2.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridview2.Location = '0, 86'
	$datagridview2.Name = 'datagridview2'
	$datagridview2.ReadOnly = $True
	$datagridview2.Size = '504, 164'
	$datagridview2.TabIndex = 3
	$datagridview2.add_CellContentClick($datagridview2_CellContentClick)
	#
	# buttonFileBrowse
	#
	$buttonFileBrowse.Location = '414, 9'
	$buttonFileBrowse.Name = 'buttonFileBrowse'
	$buttonFileBrowse.Size = '75, 23'
	$buttonFileBrowse.TabIndex = 2
	$buttonFileBrowse.Text = 'Browse...'
	$buttonFileBrowse.UseCompatibleTextRendering = $True
	$buttonFileBrowse.UseVisualStyleBackColor = $True
	$buttonFileBrowse.add_Click($buttonFileBrowse_Click)
	#
	# textboxServerFileName
	#
	$textboxServerFileName.Location = '137, 11'
	$textboxServerFileName.Name = 'textboxServerFileName'
	$textboxServerFileName.ReadOnly = $True
	$textboxServerFileName.Size = '259, 20'
	$textboxServerFileName.TabIndex = 1
	$textboxServerFileName.add_TextChanged($textboxServerFileName_TextChanged)
	#
	# labelServerListFilePath
	#
	$labelServerListFilePath.AutoSize = $True
	$labelServerListFilePath.Location = '9, 14'
	$labelServerListFilePath.Name = 'labelServerListFilePath'
	$labelServerListFilePath.Size = '109, 17'
	$labelServerListFilePath.TabIndex = 0
	$labelServerListFilePath.Text = 'Server List File Path:'
	$labelServerListFilePath.UseCompatibleTextRendering = $True
	#
	# tabpageStep2
	#
	$tabpageStep2.Controls.Add($checkboxDoNotSpecifySQLCrede)
	$tabpageStep2.Controls.Add($buttonExecute1)
	$tabpageStep2.Controls.Add($textboxSQLAccount)
	$tabpageStep2.Controls.Add($buttonSetSQLAccount)
	$tabpageStep2.Controls.Add($buttonSetDomainAccount)
	$tabpageStep2.Controls.Add($textboxDomainAccount)
	$tabpageStep2.Controls.Add($label1)
	$tabpageStep2.Location = '4, 22'
	$tabpageStep2.Name = 'tabpageStep2'
	$tabpageStep2.Padding = '3, 3, 3, 3'
	$tabpageStep2.Size = '504, 250'
	$tabpageStep2.TabIndex = 1
	$tabpageStep2.Text = 'Step 2'
	$tabpageStep2.UseVisualStyleBackColor = $True
	#
	# checkboxDoNotSpecifySQLCrede
	#
	$checkboxDoNotSpecifySQLCrede.Location = '185, 100'
	$checkboxDoNotSpecifySQLCrede.Name = 'checkboxDoNotSpecifySQLCrede'
	$checkboxDoNotSpecifySQLCrede.Size = '136, 35'
	$checkboxDoNotSpecifySQLCrede.TabIndex = 6
	$checkboxDoNotSpecifySQLCrede.Text = 'Do not specify SQL credentials'
	$checkboxDoNotSpecifySQLCrede.UseCompatibleTextRendering = $True
	$checkboxDoNotSpecifySQLCrede.UseVisualStyleBackColor = $True
	$checkboxDoNotSpecifySQLCrede.add_CheckedChanged($checkboxDoNotSpecifySQLCrede_CheckedChanged)
	#
	# buttonExecute1
	#
	$buttonExecute1.Enabled = $False
	$buttonExecute1.Location = '22, 204'
	$buttonExecute1.Name = 'buttonExecute1'
	$buttonExecute1.Size = '146, 23'
	$buttonExecute1.TabIndex = 5
	$buttonExecute1.Text = 'Execute Data Collection'
	$buttonExecute1.UseCompatibleTextRendering = $True
	$buttonExecute1.UseVisualStyleBackColor = $True
	$buttonExecute1.add_Click($buttonExecute1_Click)
	#
	# textboxSQLAccount
	#
	$textboxSQLAccount.Location = '22, 73'
	$textboxSQLAccount.Name = 'textboxSQLAccount'
	$textboxSQLAccount.ReadOnly = $True
	$textboxSQLAccount.Size = '146, 20'
	$textboxSQLAccount.TabIndex = 4
	$textboxSQLAccount.add_TextChanged($textboxSQLAccount_TextChanged)
	#
	# buttonSetSQLAccount
	#
	$buttonSetSQLAccount.Location = '185, 71'
	$buttonSetSQLAccount.Name = 'buttonSetSQLAccount'
	$buttonSetSQLAccount.Size = '136, 23'
	$buttonSetSQLAccount.TabIndex = 3
	$buttonSetSQLAccount.Text = 'Set SQL Account'
	$buttonSetSQLAccount.UseCompatibleTextRendering = $True
	$buttonSetSQLAccount.UseVisualStyleBackColor = $True
	$buttonSetSQLAccount.add_Click($buttonSetSQLAccount_Click)
	#
	# buttonSetDomainAccount
	#
	$buttonSetDomainAccount.Location = '185, 27'
	$buttonSetDomainAccount.Name = 'buttonSetDomainAccount'
	$buttonSetDomainAccount.Size = '136, 23'
	$buttonSetDomainAccount.TabIndex = 2
	$buttonSetDomainAccount.Text = 'Set Domain Account'
	$buttonSetDomainAccount.UseCompatibleTextRendering = $True
	$buttonSetDomainAccount.UseVisualStyleBackColor = $True
	$buttonSetDomainAccount.add_Click($buttonSetDomainAccount_Click)
	#
	# textboxDomainAccount
	#
	$textboxDomainAccount.Location = '22, 28'
	$textboxDomainAccount.Name = 'textboxDomainAccount'
	$textboxDomainAccount.ReadOnly = $True
	$textboxDomainAccount.Size = '146, 20'
	$textboxDomainAccount.TabIndex = 1
	$textboxDomainAccount.add_TextChanged($textboxDomainAccount_TextChanged)
	#
	# label1
	#
	$label1.AutoSize = $True
	$label1.Location = '-30, 43'
	$label1.Name = 'label1'
	$label1.Size = '35, 17'
	$label1.TabIndex = 0
	$label1.Text = 'label1'
	$label1.UseCompatibleTextRendering = $True
	#
	# buttonNext
	#
	$buttonNext.Anchor = 'Bottom, Right'
	$buttonNext.Location = '288, 294'
	$buttonNext.Name = 'buttonNext'
	$buttonNext.Size = '75, 23'
	$buttonNext.TabIndex = 2
	$buttonNext.Text = '&Next >'
	$buttonNext.UseCompatibleTextRendering = $True
	$buttonNext.UseVisualStyleBackColor = $True
	$buttonNext.add_Click($buttonNext_Click)
	#
	# openfiledialog1
	#
	$openfiledialog1.FileName = 'openfiledialog1'
	$openfiledialog1.add_FileOk($openfiledialog1_FileOk)
	#
	# folderbrowsermoderndialog1
	#
	$tabpageStep2.ResumeLayout()
	$tabpageStep1.ResumeLayout()
	$tabcontrolWizard.ResumeLayout()
	$formCombinedSQLReporting.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formCombinedSQLReporting.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formCombinedSQLReporting.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formCombinedSQLReporting.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formCombinedSQLReporting.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formCombinedSQLReporting.ShowDialog()

}
#endregion Source: MainForm.psf

#Start the application
Main ($CommandLine)
